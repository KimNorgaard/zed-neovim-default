// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package zed

import "encoding/json"
import "fmt"
import yaml "gopkg.in/yaml.v3"
import "reflect"

type AppearanceContent string

const AppearanceContentDark AppearanceContent = "dark"
const AppearanceContentLight AppearanceContent = "light"

var enumValues_AppearanceContent = []interface{}{
	"light",
	"dark",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppearanceContent) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppearanceContent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppearanceContent, v)
	}
	*j = AppearanceContent(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *AppearanceContent) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppearanceContent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppearanceContent, v)
	}
	*j = AppearanceContent(v)
	return nil
}

type FontStyleContent string

const FontStyleContentItalic FontStyleContent = "italic"
const FontStyleContentNormal FontStyleContent = "normal"
const FontStyleContentOblique FontStyleContent = "oblique"

var enumValues_FontStyleContent = []interface{}{
	"normal",
	"italic",
	"oblique",
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *FontStyleContent) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_FontStyleContent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_FontStyleContent, v)
	}
	*j = FontStyleContent(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FontStyleContent) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_FontStyleContent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_FontStyleContent, v)
	}
	*j = FontStyleContent(v)
	return nil
}

type HighlightStyleContent struct {
	// Color corresponds to the JSON schema field "color".
	Color *string `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// FontStyle corresponds to the JSON schema field "font_style".
	FontStyle interface{} `json:"font_style,omitempty" yaml:"font_style,omitempty" mapstructure:"font_style,omitempty"`

	// FontWeight corresponds to the JSON schema field "font_weight".
	FontWeight interface{} `json:"font_weight,omitempty" yaml:"font_weight,omitempty" mapstructure:"font_weight,omitempty"`
}

type PlayerColorContent struct {
	// Background corresponds to the JSON schema field "background".
	Background *string `json:"background,omitempty" yaml:"background,omitempty" mapstructure:"background,omitempty"`

	// Cursor corresponds to the JSON schema field "cursor".
	Cursor *string `json:"cursor,omitempty" yaml:"cursor,omitempty" mapstructure:"cursor,omitempty"`

	// Selection corresponds to the JSON schema field "selection".
	Selection *string `json:"selection,omitempty" yaml:"selection,omitempty" mapstructure:"selection,omitempty"`
}

// The content of a serialized theme.
type ThemeContent struct {
	// Appearance corresponds to the JSON schema field "appearance".
	Appearance AppearanceContent `json:"appearance" yaml:"appearance" mapstructure:"appearance"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Style corresponds to the JSON schema field "style".
	Style ThemeStyleContent `json:"style" yaml:"style" mapstructure:"style"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ThemeContent) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["appearance"]; raw != nil && !ok {
		return fmt.Errorf("field appearance in ThemeContent: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ThemeContent: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in ThemeContent: required")
	}
	type Plain ThemeContent
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ThemeContent(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *ThemeContent) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if _, ok := raw["appearance"]; raw != nil && !ok {
		return fmt.Errorf("field appearance in ThemeContent: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ThemeContent: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in ThemeContent: required")
	}
	type Plain ThemeContent
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = ThemeContent(plain)
	return nil
}

// The content of a serialized theme.
type ThemeStyleContent struct {
	// Background Color. Used for the app background and blank panels or windows.
	Background *string `json:"background,omitempty" yaml:"background,omitempty" mapstructure:"background,omitempty"`

	// Border color. Used for most borders, is usually a high contrast color.
	Border *string `json:"border,omitempty" yaml:"border,omitempty" mapstructure:"border,omitempty"`

	// Border color. Used for disabled elements, like a disabled input or button.
	BorderDisabled *string `json:"border.disabled,omitempty" yaml:"border.disabled,omitempty" mapstructure:"border.disabled,omitempty"`

	// Border color. Used for focused elements, like keyboard focused list item.
	BorderFocused *string `json:"border.focused,omitempty" yaml:"border.focused,omitempty" mapstructure:"border.focused,omitempty"`

	// Border color. Used for selected elements, like an active search filter or
	// selected checkbox.
	BorderSelected *string `json:"border.selected,omitempty" yaml:"border.selected,omitempty" mapstructure:"border.selected,omitempty"`

	// Border color. Used for transparent borders. Used for placeholder borders when
	// an element gains a border on state change.
	BorderTransparent *string `json:"border.transparent,omitempty" yaml:"border.transparent,omitempty" mapstructure:"border.transparent,omitempty"`

	// Border color. Used for deemphasized borders, like a visual divider between two
	// sections
	BorderVariant *string `json:"border.variant,omitempty" yaml:"border.variant,omitempty" mapstructure:"border.variant,omitempty"`

	// Indicates some kind of conflict, like a file changed on disk while it was open,
	// or merge conflicts in a Git repository.
	Conflict *string `json:"conflict,omitempty" yaml:"conflict,omitempty" mapstructure:"conflict,omitempty"`

	// ConflictBackground corresponds to the JSON schema field "conflict.background".
	ConflictBackground *string `json:"conflict.background,omitempty" yaml:"conflict.background,omitempty" mapstructure:"conflict.background,omitempty"`

	// ConflictBorder corresponds to the JSON schema field "conflict.border".
	ConflictBorder *string `json:"conflict.border,omitempty" yaml:"conflict.border,omitempty" mapstructure:"conflict.border,omitempty"`

	// Indicates something new, like a new file added to a Git repository.
	Created *string `json:"created,omitempty" yaml:"created,omitempty" mapstructure:"created,omitempty"`

	// CreatedBackground corresponds to the JSON schema field "created.background".
	CreatedBackground *string `json:"created.background,omitempty" yaml:"created.background,omitempty" mapstructure:"created.background,omitempty"`

	// CreatedBorder corresponds to the JSON schema field "created.border".
	CreatedBorder *string `json:"created.border,omitempty" yaml:"created.border,omitempty" mapstructure:"created.border,omitempty"`

	// Indicates that something no longer exists, like a deleted file.
	Deleted *string `json:"deleted,omitempty" yaml:"deleted,omitempty" mapstructure:"deleted,omitempty"`

	// DeletedBackground corresponds to the JSON schema field "deleted.background".
	DeletedBackground *string `json:"deleted.background,omitempty" yaml:"deleted.background,omitempty" mapstructure:"deleted.background,omitempty"`

	// DeletedBorder corresponds to the JSON schema field "deleted.border".
	DeletedBorder *string `json:"deleted.border,omitempty" yaml:"deleted.border,omitempty" mapstructure:"deleted.border,omitempty"`

	// Background Color. Used for the area that shows where a dragged element will be
	// dropped.
	DropTargetBackground *string `json:"drop_target.background,omitempty" yaml:"drop_target.background,omitempty" mapstructure:"drop_target.background,omitempty"`

	// EditorActiveLineBackground corresponds to the JSON schema field
	// "editor.active_line.background".
	EditorActiveLineBackground *string `json:"editor.active_line.background,omitempty" yaml:"editor.active_line.background,omitempty" mapstructure:"editor.active_line.background,omitempty"`

	// Text Color. Used for the text of the line number in the editor gutter when the
	// line is highlighted.
	EditorActiveLineNumber *string `json:"editor.active_line_number,omitempty" yaml:"editor.active_line_number,omitempty" mapstructure:"editor.active_line_number,omitempty"`

	// EditorActiveWrapGuide corresponds to the JSON schema field
	// "editor.active_wrap_guide".
	EditorActiveWrapGuide *string `json:"editor.active_wrap_guide,omitempty" yaml:"editor.active_wrap_guide,omitempty" mapstructure:"editor.active_wrap_guide,omitempty"`

	// EditorBackground corresponds to the JSON schema field "editor.background".
	EditorBackground *string `json:"editor.background,omitempty" yaml:"editor.background,omitempty" mapstructure:"editor.background,omitempty"`

	// Read-access of a symbol, like reading a variable.
	//
	// A document highlight is a range inside a text document which deserves special
	// attention. Usually a document highlight is visualized by changing the
	// background color of its range.
	EditorDocumentHighlightReadBackground *string `json:"editor.document_highlight.read_background,omitempty" yaml:"editor.document_highlight.read_background,omitempty" mapstructure:"editor.document_highlight.read_background,omitempty"`

	// Read-access of a symbol, like reading a variable.
	//
	// A document highlight is a range inside a text document which deserves special
	// attention. Usually a document highlight is visualized by changing the
	// background color of its range.
	EditorDocumentHighlightWriteBackground *string `json:"editor.document_highlight.write_background,omitempty" yaml:"editor.document_highlight.write_background,omitempty" mapstructure:"editor.document_highlight.write_background,omitempty"`

	// EditorForeground corresponds to the JSON schema field "editor.foreground".
	EditorForeground *string `json:"editor.foreground,omitempty" yaml:"editor.foreground,omitempty" mapstructure:"editor.foreground,omitempty"`

	// EditorGutterBackground corresponds to the JSON schema field
	// "editor.gutter.background".
	EditorGutterBackground *string `json:"editor.gutter.background,omitempty" yaml:"editor.gutter.background,omitempty" mapstructure:"editor.gutter.background,omitempty"`

	// EditorHighlightedLineBackground corresponds to the JSON schema field
	// "editor.highlighted_line.background".
	EditorHighlightedLineBackground *string `json:"editor.highlighted_line.background,omitempty" yaml:"editor.highlighted_line.background,omitempty" mapstructure:"editor.highlighted_line.background,omitempty"`

	// Text Color. Used to mark invisible characters in the editor.
	//
	// Example: spaces, tabs, carriage returns, etc.
	EditorInvisible *string `json:"editor.invisible,omitempty" yaml:"editor.invisible,omitempty" mapstructure:"editor.invisible,omitempty"`

	// Text Color. Used for the text of the line number in the editor gutter.
	EditorLineNumber *string `json:"editor.line_number,omitempty" yaml:"editor.line_number,omitempty" mapstructure:"editor.line_number,omitempty"`

	// EditorSubheaderBackground corresponds to the JSON schema field
	// "editor.subheader.background".
	EditorSubheaderBackground *string `json:"editor.subheader.background,omitempty" yaml:"editor.subheader.background,omitempty" mapstructure:"editor.subheader.background,omitempty"`

	// EditorWrapGuide corresponds to the JSON schema field "editor.wrap_guide".
	EditorWrapGuide *string `json:"editor.wrap_guide,omitempty" yaml:"editor.wrap_guide,omitempty" mapstructure:"editor.wrap_guide,omitempty"`

	// Background Color. Used for the active state of an element that should have a
	// different background than the surface it's on.
	//
	// Active states are triggered by the mouse button being pressed down on an
	// element, or the Return button or other activator being pressd.
	ElementActive *string `json:"element.active,omitempty" yaml:"element.active,omitempty" mapstructure:"element.active,omitempty"`

	// Background Color. Used for the background of an element that should have a
	// different background than the surface it's on.
	//
	// Elements might include: Buttons, Inputs, Checkboxes, Radio Buttons...
	//
	// For an element that should have the same background as the surface it's on, use
	// `ghost_element_background`.
	ElementBackground *string `json:"element.background,omitempty" yaml:"element.background,omitempty" mapstructure:"element.background,omitempty"`

	// Background Color. Used for the disabled state of an element that should have a
	// different background than the surface it's on.
	//
	// Disabled states are shown when a user cannot interact with an element, like a
	// disabled button or input.
	ElementDisabled *string `json:"element.disabled,omitempty" yaml:"element.disabled,omitempty" mapstructure:"element.disabled,omitempty"`

	// Background Color. Used for the hover state of an element that should have a
	// different background than the surface it's on.
	//
	// Hover states are triggered by the mouse entering an element, or a finger
	// touching an element on a touch screen.
	ElementHover *string `json:"element.hover,omitempty" yaml:"element.hover,omitempty" mapstructure:"element.hover,omitempty"`

	// Background Color. Used for the selected state of an element that should have a
	// different background than the surface it's on.
	//
	// Selected states are triggered by the element being selected (or "activated") by
	// the user.
	//
	// This could include a selected checkbox, a toggleable button that is toggled on,
	// etc.
	ElementSelected *string `json:"element.selected,omitempty" yaml:"element.selected,omitempty" mapstructure:"element.selected,omitempty"`

	// Border color. Used for elevated surfaces, like a context menu, popup, or
	// dialog.
	ElevatedSurfaceBackground *string `json:"elevated_surface.background,omitempty" yaml:"elevated_surface.background,omitempty" mapstructure:"elevated_surface.background,omitempty"`

	// Indicates a system error, a failed operation or a diagnostic error.
	Error *string `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// ErrorBackground corresponds to the JSON schema field "error.background".
	ErrorBackground *string `json:"error.background,omitempty" yaml:"error.background,omitempty" mapstructure:"error.background,omitempty"`

	// ErrorBorder corresponds to the JSON schema field "error.border".
	ErrorBorder *string `json:"error.border,omitempty" yaml:"error.border,omitempty" mapstructure:"error.border,omitempty"`

	// Background Color. Used for the active state of a ghost element that should have
	// the same background as the surface it's on.
	//
	// Active states are triggered by the mouse button being pressed down on an
	// element, or the Return button or other activator being pressd.
	GhostElementActive *string `json:"ghost_element.active,omitempty" yaml:"ghost_element.active,omitempty" mapstructure:"ghost_element.active,omitempty"`

	// Used for the background of a ghost element that should have the same background
	// as the surface it's on.
	//
	// Elements might include: Buttons, Inputs, Checkboxes, Radio Buttons...
	//
	// For an element that should have a different background than the surface it's
	// on, use `element_background`.
	GhostElementBackground *string `json:"ghost_element.background,omitempty" yaml:"ghost_element.background,omitempty" mapstructure:"ghost_element.background,omitempty"`

	// Background Color. Used for the disabled state of a ghost element that should
	// have the same background as the surface it's on.
	//
	// Disabled states are shown when a user cannot interact with an element, like a
	// disabled button or input.
	GhostElementDisabled *string `json:"ghost_element.disabled,omitempty" yaml:"ghost_element.disabled,omitempty" mapstructure:"ghost_element.disabled,omitempty"`

	// Background Color. Used for the hover state of a ghost element that should have
	// the same background as the surface it's on.
	//
	// Hover states are triggered by the mouse entering an element, or a finger
	// touching an element on a touch screen.
	GhostElementHover *string `json:"ghost_element.hover,omitempty" yaml:"ghost_element.hover,omitempty" mapstructure:"ghost_element.hover,omitempty"`

	// Background Color. Used for the selected state of a ghost element that should
	// have the same background as the surface it's on.
	//
	// Selected states are triggered by the element being selected (or "activated") by
	// the user.
	//
	// This could include a selected checkbox, a toggleable button that is toggled on,
	// etc.
	GhostElementSelected *string `json:"ghost_element.selected,omitempty" yaml:"ghost_element.selected,omitempty" mapstructure:"ghost_element.selected,omitempty"`

	// Represents a hidden status, such as a file being hidden in a file tree.
	Hidden *string `json:"hidden,omitempty" yaml:"hidden,omitempty" mapstructure:"hidden,omitempty"`

	// HiddenBackground corresponds to the JSON schema field "hidden.background".
	HiddenBackground *string `json:"hidden.background,omitempty" yaml:"hidden.background,omitempty" mapstructure:"hidden.background,omitempty"`

	// HiddenBorder corresponds to the JSON schema field "hidden.border".
	HiddenBorder *string `json:"hidden.border,omitempty" yaml:"hidden.border,omitempty" mapstructure:"hidden.border,omitempty"`

	// Indicates a hint or some kind of additional information.
	Hint *string `json:"hint,omitempty" yaml:"hint,omitempty" mapstructure:"hint,omitempty"`

	// HintBackground corresponds to the JSON schema field "hint.background".
	HintBackground *string `json:"hint.background,omitempty" yaml:"hint.background,omitempty" mapstructure:"hint.background,omitempty"`

	// HintBorder corresponds to the JSON schema field "hint.border".
	HintBorder *string `json:"hint.border,omitempty" yaml:"hint.border,omitempty" mapstructure:"hint.border,omitempty"`

	// Fill Color. Used for the default fill color of an icon.
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Fill Color. Used for the accent fill color of an icon.
	//
	// This might be used to show when a toggleable icon button is selected.
	IconAccent *string `json:"icon.accent,omitempty" yaml:"icon.accent,omitempty" mapstructure:"icon.accent,omitempty"`

	// Fill Color. Used for the disabled fill color of an icon.
	//
	// Disabled states are shown when a user cannot interact with an element, like a
	// icon button.
	IconDisabled *string `json:"icon.disabled,omitempty" yaml:"icon.disabled,omitempty" mapstructure:"icon.disabled,omitempty"`

	// Fill Color. Used for the muted or deemphasized fill color of an icon.
	//
	// This might be used to show an icon in an inactive pane, or to demphasize a
	// series of icons to give them less visual weight.
	IconMuted *string `json:"icon.muted,omitempty" yaml:"icon.muted,omitempty" mapstructure:"icon.muted,omitempty"`

	// Fill Color. Used for the placeholder fill color of an icon.
	//
	// This might be used to show an icon in an input that disappears when the user
	// enters text.
	IconPlaceholder *string `json:"icon.placeholder,omitempty" yaml:"icon.placeholder,omitempty" mapstructure:"icon.placeholder,omitempty"`

	// Indicates that something is deliberately ignored, such as a file or operation
	// ignored by Git.
	Ignored *string `json:"ignored,omitempty" yaml:"ignored,omitempty" mapstructure:"ignored,omitempty"`

	// IgnoredBackground corresponds to the JSON schema field "ignored.background".
	IgnoredBackground *string `json:"ignored.background,omitempty" yaml:"ignored.background,omitempty" mapstructure:"ignored.background,omitempty"`

	// IgnoredBorder corresponds to the JSON schema field "ignored.border".
	IgnoredBorder *string `json:"ignored.border,omitempty" yaml:"ignored.border,omitempty" mapstructure:"ignored.border,omitempty"`

	// Represents informational status updates or messages.
	Info *string `json:"info,omitempty" yaml:"info,omitempty" mapstructure:"info,omitempty"`

	// InfoBackground corresponds to the JSON schema field "info.background".
	InfoBackground *string `json:"info.background,omitempty" yaml:"info.background,omitempty" mapstructure:"info.background,omitempty"`

	// InfoBorder corresponds to the JSON schema field "info.border".
	InfoBorder *string `json:"info.border,omitempty" yaml:"info.border,omitempty" mapstructure:"info.border,omitempty"`

	// LinkTextHover corresponds to the JSON schema field "link_text.hover".
	LinkTextHover *string `json:"link_text.hover,omitempty" yaml:"link_text.hover,omitempty" mapstructure:"link_text.hover,omitempty"`

	// Indicates a changed or altered status, like a file that has been edited.
	Modified *string `json:"modified,omitempty" yaml:"modified,omitempty" mapstructure:"modified,omitempty"`

	// ModifiedBackground corresponds to the JSON schema field "modified.background".
	ModifiedBackground *string `json:"modified.background,omitempty" yaml:"modified.background,omitempty" mapstructure:"modified.background,omitempty"`

	// ModifiedBorder corresponds to the JSON schema field "modified.border".
	ModifiedBorder *string `json:"modified.border,omitempty" yaml:"modified.border,omitempty" mapstructure:"modified.border,omitempty"`

	// PaneFocusedBorder corresponds to the JSON schema field "pane.focused_border".
	PaneFocusedBorder *string `json:"pane.focused_border,omitempty" yaml:"pane.focused_border,omitempty" mapstructure:"pane.focused_border,omitempty"`

	// PanelBackground corresponds to the JSON schema field "panel.background".
	PanelBackground *string `json:"panel.background,omitempty" yaml:"panel.background,omitempty" mapstructure:"panel.background,omitempty"`

	// PanelFocusedBorder corresponds to the JSON schema field "panel.focused_border".
	PanelFocusedBorder *string `json:"panel.focused_border,omitempty" yaml:"panel.focused_border,omitempty" mapstructure:"panel.focused_border,omitempty"`

	// Players corresponds to the JSON schema field "players".
	Players []PlayerColorContent `json:"players,omitempty" yaml:"players,omitempty" mapstructure:"players,omitempty"`

	// Indicates something that is predicted, like automatic code completion, or
	// generated code.
	Predictive *string `json:"predictive,omitempty" yaml:"predictive,omitempty" mapstructure:"predictive,omitempty"`

	// PredictiveBackground corresponds to the JSON schema field
	// "predictive.background".
	PredictiveBackground *string `json:"predictive.background,omitempty" yaml:"predictive.background,omitempty" mapstructure:"predictive.background,omitempty"`

	// PredictiveBorder corresponds to the JSON schema field "predictive.border".
	PredictiveBorder *string `json:"predictive.border,omitempty" yaml:"predictive.border,omitempty" mapstructure:"predictive.border,omitempty"`

	// Represents a renamed status, such as a file that has been renamed.
	Renamed *string `json:"renamed,omitempty" yaml:"renamed,omitempty" mapstructure:"renamed,omitempty"`

	// RenamedBackground corresponds to the JSON schema field "renamed.background".
	RenamedBackground *string `json:"renamed.background,omitempty" yaml:"renamed.background,omitempty" mapstructure:"renamed.background,omitempty"`

	// RenamedBorder corresponds to the JSON schema field "renamed.border".
	RenamedBorder *string `json:"renamed.border,omitempty" yaml:"renamed.border,omitempty" mapstructure:"renamed.border,omitempty"`

	// The border color of the scrollbar thumb.
	ScrollbarThumbBorder *string `json:"scrollbar.thumb.border,omitempty" yaml:"scrollbar.thumb.border,omitempty" mapstructure:"scrollbar.thumb.border,omitempty"`

	// The color of the scrollbar thumb when hovered over.
	ScrollbarThumbHoverBackground *string `json:"scrollbar.thumb.hover_background,omitempty" yaml:"scrollbar.thumb.hover_background,omitempty" mapstructure:"scrollbar.thumb.hover_background,omitempty"`

	// The background color of the scrollbar track.
	ScrollbarTrackBackground *string `json:"scrollbar.track.background,omitempty" yaml:"scrollbar.track.background,omitempty" mapstructure:"scrollbar.track.background,omitempty"`

	// The border color of the scrollbar track.
	ScrollbarTrackBorder *string `json:"scrollbar.track.border,omitempty" yaml:"scrollbar.track.border,omitempty" mapstructure:"scrollbar.track.border,omitempty"`

	// The color of the scrollbar thumb.
	ScrollbarThumbBackground *string `json:"scrollbar_thumb.background,omitempty" yaml:"scrollbar_thumb.background,omitempty" mapstructure:"scrollbar_thumb.background,omitempty"`

	// SearchMatchBackground corresponds to the JSON schema field
	// "search.match_background".
	SearchMatchBackground *string `json:"search.match_background,omitempty" yaml:"search.match_background,omitempty" mapstructure:"search.match_background,omitempty"`

	// StatusBarBackground corresponds to the JSON schema field
	// "status_bar.background".
	StatusBarBackground *string `json:"status_bar.background,omitempty" yaml:"status_bar.background,omitempty" mapstructure:"status_bar.background,omitempty"`

	// Indicates a successful operation or task completion.
	Success *string `json:"success,omitempty" yaml:"success,omitempty" mapstructure:"success,omitempty"`

	// SuccessBackground corresponds to the JSON schema field "success.background".
	SuccessBackground *string `json:"success.background,omitempty" yaml:"success.background,omitempty" mapstructure:"success.background,omitempty"`

	// SuccessBorder corresponds to the JSON schema field "success.border".
	SuccessBorder *string `json:"success.border,omitempty" yaml:"success.border,omitempty" mapstructure:"success.border,omitempty"`

	// Background Color. Used for grounded surfaces like a panel or tab.
	SurfaceBackground *string `json:"surface.background,omitempty" yaml:"surface.background,omitempty" mapstructure:"surface.background,omitempty"`

	// The styles for syntax nodes.
	Syntax ThemeStyleContentSyntax `json:"syntax,omitempty" yaml:"syntax,omitempty" mapstructure:"syntax,omitempty"`

	// TabActiveBackground corresponds to the JSON schema field
	// "tab.active_background".
	TabActiveBackground *string `json:"tab.active_background,omitempty" yaml:"tab.active_background,omitempty" mapstructure:"tab.active_background,omitempty"`

	// TabInactiveBackground corresponds to the JSON schema field
	// "tab.inactive_background".
	TabInactiveBackground *string `json:"tab.inactive_background,omitempty" yaml:"tab.inactive_background,omitempty" mapstructure:"tab.inactive_background,omitempty"`

	// TabBarBackground corresponds to the JSON schema field "tab_bar.background".
	TabBarBackground *string `json:"tab_bar.background,omitempty" yaml:"tab_bar.background,omitempty" mapstructure:"tab_bar.background,omitempty"`

	// Black ANSI terminal color.
	TerminalAnsiBlack *string `json:"terminal.ansi.black,omitempty" yaml:"terminal.ansi.black,omitempty" mapstructure:"terminal.ansi.black,omitempty"`

	// Blue ANSI terminal color.
	TerminalAnsiBlue *string `json:"terminal.ansi.blue,omitempty" yaml:"terminal.ansi.blue,omitempty" mapstructure:"terminal.ansi.blue,omitempty"`

	// Bright black ANSI terminal color.
	TerminalAnsiBrightBlack *string `json:"terminal.ansi.bright_black,omitempty" yaml:"terminal.ansi.bright_black,omitempty" mapstructure:"terminal.ansi.bright_black,omitempty"`

	// Bright blue ANSI terminal color.
	TerminalAnsiBrightBlue *string `json:"terminal.ansi.bright_blue,omitempty" yaml:"terminal.ansi.bright_blue,omitempty" mapstructure:"terminal.ansi.bright_blue,omitempty"`

	// Bright cyan ANSI terminal color.
	TerminalAnsiBrightCyan *string `json:"terminal.ansi.bright_cyan,omitempty" yaml:"terminal.ansi.bright_cyan,omitempty" mapstructure:"terminal.ansi.bright_cyan,omitempty"`

	// Bright green ANSI terminal color.
	TerminalAnsiBrightGreen *string `json:"terminal.ansi.bright_green,omitempty" yaml:"terminal.ansi.bright_green,omitempty" mapstructure:"terminal.ansi.bright_green,omitempty"`

	// Bright magenta ANSI terminal color.
	TerminalAnsiBrightMagenta *string `json:"terminal.ansi.bright_magenta,omitempty" yaml:"terminal.ansi.bright_magenta,omitempty" mapstructure:"terminal.ansi.bright_magenta,omitempty"`

	// Bright red ANSI terminal color.
	TerminalAnsiBrightRed *string `json:"terminal.ansi.bright_red,omitempty" yaml:"terminal.ansi.bright_red,omitempty" mapstructure:"terminal.ansi.bright_red,omitempty"`

	// Bright white ANSI terminal color.
	TerminalAnsiBrightWhite *string `json:"terminal.ansi.bright_white,omitempty" yaml:"terminal.ansi.bright_white,omitempty" mapstructure:"terminal.ansi.bright_white,omitempty"`

	// Bright yellow ANSI terminal color.
	TerminalAnsiBrightYellow *string `json:"terminal.ansi.bright_yellow,omitempty" yaml:"terminal.ansi.bright_yellow,omitempty" mapstructure:"terminal.ansi.bright_yellow,omitempty"`

	// Cyan ANSI terminal color.
	TerminalAnsiCyan *string `json:"terminal.ansi.cyan,omitempty" yaml:"terminal.ansi.cyan,omitempty" mapstructure:"terminal.ansi.cyan,omitempty"`

	// Dim black ANSI terminal color.
	TerminalAnsiDimBlack *string `json:"terminal.ansi.dim_black,omitempty" yaml:"terminal.ansi.dim_black,omitempty" mapstructure:"terminal.ansi.dim_black,omitempty"`

	// Dim blue ANSI terminal color.
	TerminalAnsiDimBlue *string `json:"terminal.ansi.dim_blue,omitempty" yaml:"terminal.ansi.dim_blue,omitempty" mapstructure:"terminal.ansi.dim_blue,omitempty"`

	// Dim cyan ANSI terminal color.
	TerminalAnsiDimCyan *string `json:"terminal.ansi.dim_cyan,omitempty" yaml:"terminal.ansi.dim_cyan,omitempty" mapstructure:"terminal.ansi.dim_cyan,omitempty"`

	// Dim green ANSI terminal color.
	TerminalAnsiDimGreen *string `json:"terminal.ansi.dim_green,omitempty" yaml:"terminal.ansi.dim_green,omitempty" mapstructure:"terminal.ansi.dim_green,omitempty"`

	// Dim magenta ANSI terminal color.
	TerminalAnsiDimMagenta *string `json:"terminal.ansi.dim_magenta,omitempty" yaml:"terminal.ansi.dim_magenta,omitempty" mapstructure:"terminal.ansi.dim_magenta,omitempty"`

	// Dim red ANSI terminal color.
	TerminalAnsiDimRed *string `json:"terminal.ansi.dim_red,omitempty" yaml:"terminal.ansi.dim_red,omitempty" mapstructure:"terminal.ansi.dim_red,omitempty"`

	// Dim white ANSI terminal color.
	TerminalAnsiDimWhite *string `json:"terminal.ansi.dim_white,omitempty" yaml:"terminal.ansi.dim_white,omitempty" mapstructure:"terminal.ansi.dim_white,omitempty"`

	// Dim yellow ANSI terminal color.
	TerminalAnsiDimYellow *string `json:"terminal.ansi.dim_yellow,omitempty" yaml:"terminal.ansi.dim_yellow,omitempty" mapstructure:"terminal.ansi.dim_yellow,omitempty"`

	// Green ANSI terminal color.
	TerminalAnsiGreen *string `json:"terminal.ansi.green,omitempty" yaml:"terminal.ansi.green,omitempty" mapstructure:"terminal.ansi.green,omitempty"`

	// Magenta ANSI terminal color.
	TerminalAnsiMagenta *string `json:"terminal.ansi.magenta,omitempty" yaml:"terminal.ansi.magenta,omitempty" mapstructure:"terminal.ansi.magenta,omitempty"`

	// Red ANSI terminal color.
	TerminalAnsiRed *string `json:"terminal.ansi.red,omitempty" yaml:"terminal.ansi.red,omitempty" mapstructure:"terminal.ansi.red,omitempty"`

	// White ANSI terminal color.
	TerminalAnsiWhite *string `json:"terminal.ansi.white,omitempty" yaml:"terminal.ansi.white,omitempty" mapstructure:"terminal.ansi.white,omitempty"`

	// Yellow ANSI terminal color.
	TerminalAnsiYellow *string `json:"terminal.ansi.yellow,omitempty" yaml:"terminal.ansi.yellow,omitempty" mapstructure:"terminal.ansi.yellow,omitempty"`

	// Terminal background color.
	TerminalBackground *string `json:"terminal.background,omitempty" yaml:"terminal.background,omitempty" mapstructure:"terminal.background,omitempty"`

	// Bright terminal foreground color.
	TerminalBrightForeground *string `json:"terminal.bright_foreground,omitempty" yaml:"terminal.bright_foreground,omitempty" mapstructure:"terminal.bright_foreground,omitempty"`

	// Dim terminal foreground color.
	TerminalDimForeground *string `json:"terminal.dim_foreground,omitempty" yaml:"terminal.dim_foreground,omitempty" mapstructure:"terminal.dim_foreground,omitempty"`

	// Terminal foreground color.
	TerminalForeground *string `json:"terminal.foreground,omitempty" yaml:"terminal.foreground,omitempty" mapstructure:"terminal.foreground,omitempty"`

	// Text Color. Default text color used for most text.
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// Text Color. Color used for emphasis or highlighting certain text, like an
	// active filter or a matched character in a search.
	TextAccent *string `json:"text.accent,omitempty" yaml:"text.accent,omitempty" mapstructure:"text.accent,omitempty"`

	// Text Color. Color used for text denoting disabled elements. Typically, the
	// color is faded or grayed out to emphasize the disabled state.
	TextDisabled *string `json:"text.disabled,omitempty" yaml:"text.disabled,omitempty" mapstructure:"text.disabled,omitempty"`

	// Text Color. Color of muted or deemphasized text. It is a subdued version of the
	// standard text color.
	TextMuted *string `json:"text.muted,omitempty" yaml:"text.muted,omitempty" mapstructure:"text.muted,omitempty"`

	// Text Color. Color of the placeholder text typically shown in input fields to
	// guide the user to enter valid data.
	TextPlaceholder *string `json:"text.placeholder,omitempty" yaml:"text.placeholder,omitempty" mapstructure:"text.placeholder,omitempty"`

	// TitleBarBackground corresponds to the JSON schema field "title_bar.background".
	TitleBarBackground *string `json:"title_bar.background,omitempty" yaml:"title_bar.background,omitempty" mapstructure:"title_bar.background,omitempty"`

	// ToolbarBackground corresponds to the JSON schema field "toolbar.background".
	ToolbarBackground *string `json:"toolbar.background,omitempty" yaml:"toolbar.background,omitempty" mapstructure:"toolbar.background,omitempty"`

	// Indicates some kind of unreachable status, like a block of code that can never
	// be reached.
	Unreachable *string `json:"unreachable,omitempty" yaml:"unreachable,omitempty" mapstructure:"unreachable,omitempty"`

	// UnreachableBackground corresponds to the JSON schema field
	// "unreachable.background".
	UnreachableBackground *string `json:"unreachable.background,omitempty" yaml:"unreachable.background,omitempty" mapstructure:"unreachable.background,omitempty"`

	// UnreachableBorder corresponds to the JSON schema field "unreachable.border".
	UnreachableBorder *string `json:"unreachable.border,omitempty" yaml:"unreachable.border,omitempty" mapstructure:"unreachable.border,omitempty"`

	// Represents a warning status, like an operation that is about to fail.
	Warning *string `json:"warning,omitempty" yaml:"warning,omitempty" mapstructure:"warning,omitempty"`

	// WarningBackground corresponds to the JSON schema field "warning.background".
	WarningBackground *string `json:"warning.background,omitempty" yaml:"warning.background,omitempty" mapstructure:"warning.background,omitempty"`

	// WarningBorder corresponds to the JSON schema field "warning.border".
	WarningBorder *string `json:"warning.border,omitempty" yaml:"warning.border,omitempty" mapstructure:"warning.border,omitempty"`
}

// The styles for syntax nodes.
type ThemeStyleContentSyntax map[string]HighlightStyleContent

// UnmarshalJSON implements json.Unmarshaler.
func (j *ThemeStyleContent) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain ThemeStyleContent
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["players"]; !ok || v == nil {
		plain.Players = []PlayerColorContent{}
	}
	if v, ok := raw["syntax"]; !ok || v == nil {
		plain.Syntax = ThemeStyleContentSyntax{}
	}
	*j = ThemeStyleContent(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *ThemeStyleContent) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	type Plain ThemeStyleContent
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	if v, ok := raw["players"]; !ok || v == nil {
		plain.Players = []PlayerColorContent{}
	}
	if v, ok := raw["syntax"]; !ok || v == nil {
		plain.Syntax = ThemeStyleContentSyntax{}
	}
	*j = ThemeStyleContent(plain)
	return nil
}

// The content of a serialized theme family.
type V010Json struct {
	// Author corresponds to the JSON schema field "author".
	Author string `json:"author" yaml:"author" mapstructure:"author"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Themes corresponds to the JSON schema field "themes".
	Themes []ThemeContent `json:"themes" yaml:"themes" mapstructure:"themes"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *V010Json) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["author"]; raw != nil && !ok {
		return fmt.Errorf("field author in V010Json: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in V010Json: required")
	}
	if _, ok := raw["themes"]; raw != nil && !ok {
		return fmt.Errorf("field themes in V010Json: required")
	}
	type Plain V010Json
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = V010Json(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *V010Json) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if _, ok := raw["author"]; raw != nil && !ok {
		return fmt.Errorf("field author in V010Json: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in V010Json: required")
	}
	if _, ok := raw["themes"]; raw != nil && !ok {
		return fmt.Errorf("field themes in V010Json: required")
	}
	type Plain V010Json
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = V010Json(plain)
	return nil
}
